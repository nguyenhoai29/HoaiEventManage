@page "/admin/events"
@attribute [Authorize(Roles = "Admin")]

@using HoaiEventManager.CoreBusiness.Models
@using HoaiEventManager.UseCases.Events
@using HoaiEventManager.UseCases.Interfaces
@inject ViewEventsUseCase ViewEventsUseCase
@inject DeleteEventUseCase DeleteEventUseCase
@inject NavigationManager NavigationManager
@inject IRegistrationRepository RegistrationRepository

<h3>Quản Lý Sự Kiện</h3>

<div class="row mb-3">
    <div class="col-md-5">
        <div class="input-group">
            <span class="input-group-text"><i class="bi bi-search"></i></span>
            <input type="text" class="form-control" placeholder="Tìm kiếm theo tên sự kiện..." @bind="searchString" @bind:event="oninput" />
        </div>
    </div>
    <div class="col-md-4">
        <select class="form-select" @bind="filterStatus">
            <option value="All">Tất cả trạng thái</option>
            <option value="Upcoming">Sắp diễn ra</option>
            <option value="Happening">Đang diễn ra</option>
            <option value="Past">Đã diễn ra</option>
        </select>
    </div>
    <div class="col-md-3 text-end">
        <button class="btn btn-primary" @onclick="GoToCreatePage">
            <i class="bi bi-plus-circle-fill"></i> Tạo Sự Kiện Mới
        </button>
    </div>
</div>


@if (events == null)
{
    <p><em>Đang tải danh sách sự kiện...</em></p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Tên Sự Kiện</th>
                <th>Ngày Diễn Ra</th>
                <th>Đã đăng ký / Giới hạn</th>
                <th>Trạng Thái</th>
                <th class="text-center">Hành Động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var evt in FilteredEvents)
            {
                <tr>
                    <td>@evt.Name</td>
                    <td>@evt.Date.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@(registrations.ContainsKey(evt.Id) ? registrations[evt.Id] : 0) / @evt.TicketLimit</td>
                    <td>
                        @if (evt.Date.Date > DateTime.Today)
                        {
                            <span class="badge bg-info">Sắp diễn ra</span>
                        }
                        else if (evt.Date.Date == DateTime.Today)
                        {
                            <span class="badge bg-success">Đang diễn ra</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Đã diễn ra</span>
                        }
                    </td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-outline-success" @onclick="() => ViewAttendees(evt.Id)" title="Danh sách tham dự"><i class="bi bi-people-fill"></i></button>
                        <button class="btn btn-sm btn-outline-warning" @onclick="() => EditEvent(evt.Id)" title="Sửa"><i class="bi bi-pencil-square"></i></button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEvent(evt.Id)" title="Xóa"><i class="bi bi-trash3-fill"></i></button>
                        <button class="btn btn-sm btn-outline-info" @onclick="() => DuplicateEvent(evt.Id)" title="Nhân bản"><i class="bi bi-copy"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Event>? events;
    private Dictionary<int, int> registrations = new Dictionary<int, int>();
    private string searchString = string.Empty;
    private string filterStatus = "All";

    private IEnumerable<Event> FilteredEvents => events?.Where(e =>
    {
        bool matchesSearch = string.IsNullOrWhiteSpace(searchString) || e.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);

        bool matchesStatus = filterStatus switch
        {
            "Upcoming" => e.Date.Date > DateTime.Today,
            "Happening" => e.Date.Date == DateTime.Today,
            "Past" => e.Date.Date < DateTime.Today,
            _ => true
        };

        return matchesSearch && matchesStatus;
    }) ?? Enumerable.Empty<Event>();

    protected override async Task OnInitializedAsync()
    {
        events = (await ViewEventsUseCase.ExecuteAsync()).ToList();
        foreach (var evt in events)
        {
            registrations[evt.Id] = await RegistrationRepository.GetRegistrationCountForEventAsync(evt.Id);
        }
    }

    private void GoToCreatePage()
    {
        NavigationManager.NavigateTo("/admin/events/create");
    }

    private void EditEvent(int eventId)
    {
        NavigationManager.NavigateTo($"/admin/events/edit/{eventId}");
    }

    private async Task DeleteEvent(int eventId)
    {
        await DeleteEventUseCase.ExecuteAsync(eventId);
        // Tải lại dữ liệu
        events = (await ViewEventsUseCase.ExecuteAsync()).ToList();
        registrations.Remove(eventId);
    }

    private void ViewAttendees(int eventId)
    {
        NavigationManager.NavigateTo($"/admin/events/{eventId}/attendees");
    }

    private void DuplicateEvent(int eventId)
    {
        // Logic để nhân bản sự kiện sẽ được thêm ở đây
        // Ví dụ: điều hướng đến trang tạo mới với các trường đã được điền sẵn
        NavigationManager.NavigateTo($"/admin/events/create?cloneFrom={eventId}");
    }
}
